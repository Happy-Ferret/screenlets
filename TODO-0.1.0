--------------------------------------------------------------------------------
  Screenlets >0.1.0 - thoughts about the future of the screenlets (by RYX)
--------------------------------------------------------------------------------

Plans/thoughts for the framework:
-----------------------------------
- some useful logging system for a more unified (and optional) logging
- translation (maybe through launchpad?), base-classes should be translated
  using gettext, individual Screenlets could maybe get translated by their
  metadata-files
- more "crazy connectivity", e.g. make the PlantScreenlet depend on the 
  WeatherScreenlet's data ... when it rains, the plant is growing and gets a
  blossom and when it is too hot the plant drys out
- remove all UI-related stuff (i.e. dialog-windows) from the screenlet-code,
  instead add xml-metadata and let external apps generate a UI from it
  (e.g. screenlets-manager, screenlets-settings, screenlets-menu, ...)
- separate the gnome-specific code from the base-class and create two
  subclasses "GtkScreenlet" and "QtScreenlet" which then use the appropriate
  backend for either Gnome or KDE (would maybe allow windowing-backends for 
  Win32 or other platforms)
- include some of the third-party screenlets by default (Rss, Comic, Weather,
  Calc, Calendar ...)
- allow using additional rendering backends like libclutter or even OpenGL to
  fully take advantage of the accelerated desktop (maybe even make the 
  screenlets completely 3d and embed them into one C-host?)
- separate Dbus from the ScreenletService and allow using other ways of 
  communication (e.g. window properties, dcop, ...), or maybe completely remove
  all dbus-usage from session and get back to good old config-files?
- physics (maybe better through a WM-plugin which allows setting gravitation
  and mass for certain window-types?) to be able to stack screenlets on top of
  another and put them on top of other windows and have them stay there and
  move when the other windows are moved
- maybe remove gobject-dependency from Screenlet/ScreenletTheme? The custom 
  signals are mostly useless or overcomplicated anyway
- SQLite-backend for settings (would allow encrypted values)
- maybe add a ScreenletRenderer-class and subclasses which can be used to
  implement different types of abstraction within the drawing-related code
- improve theming-system (allow themes to extend other themes, e.g. by 
  overriding a few images)
- add drawing-module with utility-functions for easily load/render things
  like images
- ??? screenlets.config as replacement for Options-system:
  should be generally the same as the current system (so the option-classes
  would remain unchanged), with the difference that the option-definitions dont't 
  get stored in the class or the screenlet's instances, but in some global list
  outside the class (e.g. in screenlets.config.__options). This list should then 
  be accessible through several utility-functions like:
  - screenlets.config.add_option(Screenlet_class, Option, ...)
  - screenlets.config.set_option(Screenlet_obj, option_name, value)
  - screenlets.config.get_option(Screenlet_obj, option_name)
  - screenlets.config.get_options_list(Screenlet_obj)


Plans for (individual) Screenlets:
-----------------------------------

- try to create a JackfieldScreenlet as soon as we have a non-hackish
  MozillaWidget with compositing-support (i.e. transparent bg) and try to
  build a bridge or collaboration between the two projects
- more Drag&Drop "magic" like dragging a NotesScreenlet onto the Mailcheck
  and then getting a popup asking for an e-mail address to send the note to 
  (or dragging the Clock into a document to add the current time and date).
- BlackHoleScreenlet that "swallows" everything and looks like a hole in 
  the screen. Should be "collecting" everything that is put into it and offer
  some intelligent way to retrieve stuff from it. Could be also realized as
  a BagScreenlet ... (but a "black hole" would look better)
- ColorManagerScreenlet that allows to pick colors from anywhere (and manage
  the colors in a fancy and intuitive way?). Should display in RGB, hex, int.
- TooltipScreenlet similar to org.freedesktop.Notification which offers
  good looking, flexible and themeable tooltip/notification-windows with 
  semi-transparent bg and shadow. Other screenlets could use this for displaying
  info
- ProgressbarScreenlet which can be used by other apps to display progress of
  operations? Would remove the need for UI-threading in the calling application
- PacoScreenlet which allows make/install of tarballs by drag&drop onto some
  icon/symbol and a quick access to gpaco. When dragging a tarball onto the
  icon, it should popup an input-dialog where you can add additional 
  args to ./configure ... and maybe set some more options ... then the screenlet 
  should either popup a nice progress bar or use some ProgressbarScreenlet 
  (should launch paco through gksu to get a secure root-login)
- TamagochiScreenlet: A cute little animal/monster which acts like a 
  tamagochi and needs permanent care (food/love/water/...). Themeable to allow
  having various, different looking animals. Maybe you need to give it certain 
  text (food) to make it happy? Like dragging text on it and it starts eating
  or gets angry (depending on which words you give it to eat).
- DockScreenlet where icons can be dragged/dropped to have a quicklaunch-bar
  similar to OSX. Should have an ability to theme its background (with a 
  theme containing of two caps and a bg) ... maybe obsolete due to new Launcher?
- Picframe should have a slideshow, changing-timeout and folder-view mode

